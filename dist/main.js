!(function (e) { const t = {}; function n(r) { if (t[r]) return t[r].exports; const i = t[r] = { i: r, l: !1, exports: {} }; return e[r].call(i.exports, i, i.exports, n), i.l = !0, i.exports; }n.m = e, n.c = t, n.d = function (e, t, r) { n.o(e, t) || Object.defineProperty(e, t, { enumerable: !0, get: r }); }, n.r = function (e) { typeof Symbol !== 'undefined' && Symbol.toStringTag && Object.defineProperty(e, Symbol.toStringTag, { value: 'Module' }), Object.defineProperty(e, '__esModule', { value: !0 }); }, n.t = function (e, t) { if (1 & t && (e = n(e)), 8 & t) return e; if (4 & t && typeof e === 'object' && e && e.__esModule) return e; const r = Object.create(null); if (n.r(r), Object.defineProperty(r, 'default', { enumerable: !0, value: e }), 2 & t && typeof e !== 'string') for (const i in e)n.d(r, i, ((t) => e[t]).bind(null, i)); return r; }, n.n = function (e) { const t = e && e.__esModule ? function () { return e.default; } : function () { return e; }; return n.d(t, 'a', t), t; }, n.o = function (e, t) { return Object.prototype.hasOwnProperty.call(e, t); }, n.p = '', n(n.s = 0); }([function (e, t) {
  const n = e => document.getElementById(e); const r = n('cityName'); const i = n('weather-city'); const o = n('weather-state'); const a = n('weather-description'); const u = n('weather-advice-output'); const c = n('weather-icon'); const s = n('degrees'); const l = n('feels_like_output'); const p = n('humidity_output'); const d = n('pressure_output'); const f = n('temp_max_output'); const m = n('temp_min_output'); const y = n('wind_output'); const b = n('searchButton'); const h = n('background-input-container'); const x = n('background-output-container'); let g = ''; let T = ''; let v = ''; const _ = e => (typeof e !== 'string' ? '' : e.charAt(0).toUpperCase() + e.slice(1)); b.addEventListener('click', e => {
    if (r.value === '' || !1 === /[a-zA-Z]/.test(r.value))e.onsubmit = function (e) { e.preventDefault(); }, alert('Name of city not properly fill.'); else {
      h.style.display = 'none', x.style.display = 'flex', (() => { const e = document.getElementsByName('degreeS'); for (let t = 0, { length: n } = e; t < n; t++) if (e[t].checked) { g = e[t].value; break; } return g; })(), fetch(`http://api.openweathermap.org/data/2.5/find?q=${r.value}&units=${g}&appid=1a0a2e83eb8dee05e7317550828823c8`, { mode: 'cors' }).then(e => e.json()).then(e => {
        const { name: t, weather: n, wind: r } = e.list[0]; const {
          id: b, main: h, description: x, icon: k,
        } = n[0]; i.innerText = t; const w = `http://openweathermap.org/img/wn/${k}@2x.png`; switch (c.setAttribute('src', `${w}`), o.textContent = `${_(h)}`, a.textContent = h === x ? `${_(x)} in your city, be cautious` : `${_(x)}`, !0) { case b >= 200 && b <= 232: u.innerText = 'Stay indoors. Avoid water, and electric equipment'; break; case b >= 300 && b <= 321: u.innerText = 'You might experience beautiful a sunshine today'; break; case b >= 500 && b <= 531: u.innerText = "Don't forget your umbrella"; break; case b >= 600 && b <= 622: u.innerText = 'Avoid overexertion. Stay dry. Go outside carefully'; break; case b >= 701 && b <= 781: u.innerText = 'Anomalies in atm. Look for official instructions'; break; case b === 800: u.innerText = 'Use sun protector'; break; case b >= 801 && b <= 804: u.innerText = 'Take a healthy sun bath if you can'; break; default: u.innerText = "Looking forward for tomorrow's weather"; }(e => {
          const { main: t } = e.list[0]; const {
            temp: n, feels_like: i, humidity: o, pressure: a, temp_max: u, temp_min: c,
          } = t; g === 'metric' ? (T = ' C', v = ' m/s') : g === 'imperial' && (T = ' F', v = ' mph'), s.innerText = n + T, l.innerText = `${i + T} ยบ`, p.innerText = `${o}%`, d.innerText = `${a} hPa`, f.innerText = `${u + T} ยบ`, m.innerText = `${c + T} ยบ`, y.innerText = r.speed + v;
        })(e);
      });
    }
  });
}]));